<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sShip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vars


x = room_width/2;
y = room_height/2;


hsp = 0;
vsp = 0;
thrust = 0;

//Shooting
variationAmount = 8;
variation = 0;

canShootTimer = 0;
canShoot = false;
fireDelayTime = 1;

//instance_create(0,0,oController);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom

baseWidth = view_wview[0];
baseHeight = view_hview[0];
zoomLevel = 100;
zoomType = "none";
zoomPerStep = 0;
zoomChange = 0.05;
zoomFactor = 1;
maxZoom = 80;
minZoom = 180;

/*
//max_zoom_scale is the maximum zoom that the camera is capable of (zoomed out)
max_zoom_scale = 1.0;
 
//min_zoom_scale is the minimum zoom that the camera is capable of (zoomed in)
min_zoom_scale = 0.04;
 
//zoom_scale_adjust is the amount the target zoom scale is adjusted
//  by when the mouse wheel is moved.
zoom_scale_adjust = 0.05;
 
//zoom_speed is the speed at which the current zoom scale will move towards
//  the target zoom scale.
zoom_speed = 0.1;
 
//current_zoom_scale is zoom scale that will be actively used by the camera
current_zoom_scale = 1;
 
//target_zoom_scale is the zoom scale the camera will move towards.
target_zoom_scale = current_zoom_scale;
 
//Scroll Speed The number of pixels per step to adjust the camera view
scroll_speed = 100;
 
//Multiply locational coordinates for star systems by the relative scale in order to
//get stellaris galactic coordinates
relative_scale = 500 / 25000;
 
//Multiply locational coordinates for star systems by the relative scale inverse to
//get Map Editor galactic coordinates.
relative_scale_inverse = 25000 / 500;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
image_angle = smooth_rotate(image_angle, point_direction(x,y,mouse_x,mouse_y), 14);

dir = image_angle;

if(keyboard_check(vk_space)){
    
    hsp *= 0.80;
    vsp *= 0.80;

    thrust += distance_to_point(mouse_x,mouse_y)/10000;
    if(thrust &gt; 5){
        thrust = 5;
    }
    
    hsp += lengthdir_x(thrust,dir);
    vsp += lengthdir_y(thrust,dir);
    
} else{
    thrust *= 0.95;
}

hspeed = hsp;
vspeed = vsp;

if(keyboard_check(ord('S'))){
    speed = 0;
}

//Parallaxing Stars
tile_layer_shift(-12,hsp*0.25,vsp*0.25);
tile_layer_shift(-11,hsp*0.125,vsp*0.125);
tile_layer_shift(-10,hsp*0.06125,vsp*0.06125);




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom

var viewCenterX, viewCenterY;
viewCenterX = view_xview[0] + view_wview[0] / 2;
viewCenterY = view_yview[0] + view_hview[0] / 2;

switch(zoomType){
    case "in":
        zoomLevel = min(zoomLevel + (zoomFactor * zoomPerStep), minZoom);
    break;
    case "out":
        zoomLevel = max(zoomLevel - (zoomFactor * zoomPerStep), maxZoom);
    break;
}

view_wview[0] = baseWidth *(zoomLevel / 100);
view_hview[0] = baseHeight *(zoomLevel / 100);

view_xview[0] = viewCenterX - view_wview[0] / 2;
view_yview[0] = viewCenterY - view_hview[0] / 2;

if(zoomPerStep &gt; 0){
    zoomPerStep -= zoomChange;
} else{
    zoomType = "none";
}

//Have to manually set the view or the player is stuck in the room.
view_hborder[0] = 1280;
view_vborder[0] = 720;
//view_hspeed[0] = -1;
//view_vspeed[0] = -1;
view_xview[0]=x-(view_wview[0]/2)
view_yview[0]=y-(view_hview[0]/2)

/*
zoom();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire (Primary)
if(!canShoot){
    if(canShootTimer &lt;= fireDelayTime){
        canShootTimer++;
    } else{
        canShoot = true;
    }
}

if(mouse_check_button(mb_left) &amp;&amp; canShoot){
    arr = instance_create(x,y,oArrow);
    variation = random_range(-variationAmount,variationAmount);
    arr.direction = point_direction(x,y,mouse_x,mouse_y) + variation;
    arr.image_angle = arr.direction;
    arr.speed = speed+15;
    canShootTimer = 0;
    canShoot = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire (Secondary)
if(mouse_check_button_released(mb_right)){
    arr = instance_create(x,y,oArrow2);
    arr.direction = point_direction(x,y,mouse_x,mouse_y);
    arr.speed = speed+5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upgrade Screen

if(keyboard_check_released(ord('E'))){
    room_goto(rUpgrade);
}   

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oMeteor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xx = x;
yy = y;


with(other){
    repeat(3){
        c = instance_create(x,y,oChunk);
        c.direction = random_range(oShip.direction-35,oShip.direction+35);
        c.speed = random_range(3,9);
    }
    
    alarm[0] = 15;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoomType = "in";
zoomPerStep = 2.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoomType = "out";
zoomPerStep = 2.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
display_set_gui_size(1280,720);

draw_set_font(faConsole);
draw_set_colour(c_white);
draw_set_halign(fa_left);

draw_text(5,2,"Delta: " + string(fps_real));
draw_text(5,16,"FPS: " + string(fps));
draw_text(5,30,"Speed: " + string(speed));

b = $A9A209;
g = $54A909;

draw_set_alpha(0.75);
draw_sprite(sBB,0,10,710);
draw_healthbar(13,710,341,660,speed*4,c_white,g,b,0,false,false);
draw_set_alpha(1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.75);
draw_trail(32,4,c_gray,-1,true,1);
draw_set_alpha(1);
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
