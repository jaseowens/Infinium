<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMouse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Mouse isnt animated
image_speed = 0;

//Used to manipulate GUI
global.length = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
//Given to GUI event in ship object to calculate how much to move
//if(instance_exists(oShip)){
//    global.length = distance_to_point(oShip.x,oShip.y);
//}else{
    global.length = distance_to_point(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]/2);
//}
//Stay where mouse is
x = mouse_x;
y = mouse_y;

//Change image of mouse based on hovering state, and what room located in. 
//If not in the main room
if(room!=rMain){
    //Scale of image is set in half
    image_xscale = 0.5;
    image_yscale = 0.5;
    //Using square with circle in center image
    image_index = 1;
    
    //If hovering 
    if(place_meeting(x,y,oHoverable)){
        //Rotate by 10 degrees each step
        image_angle+=10;
    //If not hovering    
    } else{
        //Set angle to 0
        image_angle = 0;
    }
    
//If in the main room 
} else if(room==rMain){
    
    //If hovering
    if(place_meeting(x,y,oHoverable)){
        //Using square with circle in center image
        image_index = 1;
        //and rotate the image by 10 degrees each step
        image_angle+=10;
        //Alpha is = to 1 in the hovering state
        image_alpha = 1;
    //If not hovering    
    } else{
        //Set image angle to 0
        image_angle = 0;
        //St image to direction arrows
        image_index = 0;
        //Set scale to 1
        image_xscale = 1;
        image_yscale = 1;
        //Angle is dependent on ships angle
        image_angle = oShip.image_angle;
        //Alpha is dependent on distance to ship
        image_alpha = (distance_to_point(oShip.x,oShip.y)/100)/10;
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
